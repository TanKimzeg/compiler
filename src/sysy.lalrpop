use compiler::ast::*;
// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^/]*\*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: BlockItem*> "}" => Block::new(items);

BlockItem: BlockItem = {
  <stmt: Stmt> => BlockItem::Stmt(<>),
  <decl: Decl> => BlockItem::Decl(<>),
};

Stmt: Stmt = {
  MatchedStmt => <>,
  UnmatchedStmt => <>,
};

MatchedStmt: Stmt = {
  "return" <exp: Exp?> ";" => Stmt::Ret(<>),
  <id: Ident> "=" <exp: Exp> ";" => Stmt::LVal(<>),
  Block => Stmt::Block(<>),
  <exp: Exp?> ";" => Stmt::Exp(<>),
  "if" "(" <exp: Exp> ")" <then_m: MatchedStmt> "else" <else_m: MatchedStmt> =>
    Stmt::Cond(exp, Box::new(then_m), Some(Box::new(else_m))),
};

UnmatchedStmt: Stmt = {
  "if" "(" <exp: Exp> ")" <then_branch: Stmt> =>
    Stmt::Cond(exp, Box::new(then_branch), None),
  "if" "(" <exp: Exp> ")" <then_m: MatchedStmt> "else" <else_u: UnmatchedStmt> =>
    Stmt::Cond(exp, Box::new(then_m), Some(Box::new(else_u))),
};

// ---------------------- Exp ------------------------
Exp: Exp = <add_exp: LOrExp> => Exp::LOrExp(<>);

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::Single(<>),
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> =>
    LOrExp::Binary(Box::new(
      Binary { lhs: Box::new(lor_exp), op: BinOp::LOr, rhs: Box::new(land_exp) }
    ))
};

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::Single(<>),
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> =>
    LAndExp::Binary(Box::new(
      Binary { lhs: Box::new(land_exp), op: BinOp::LAnd, rhs: Box::new(eq_exp) }
    )),
};

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::Single(<>),
  <eq_exp: EqExp> "==" <rel_exp: RelExp> =>
    EqExp::Binary(Box::new(
      Binary { lhs: Box::new(eq_exp), op: BinOp::Eq, rhs: Box::new(rel_exp) }
    )),
  <eq_exp: EqExp> "!=" <rel_exp: RelExp> =>
    EqExp::Binary(Box::new(
      Binary { lhs: Box::new(eq_exp), op: BinOp::NEq, rhs: Box::new(rel_exp) }
    )),
};

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::Single(<>),
  <rel_exp: RelExp> "<" <add_exp: AddExp> =>
    RelExp::Binary(Box::new(
      Binary { lhs: Box::new(rel_exp), op: BinOp::LT, rhs: Box::new(add_exp) }
    )),
  <rel_exp: RelExp> ">" <add_exp: AddExp> =>
    RelExp::Binary(Box::new(
      Binary { lhs: Box::new(rel_exp), op: BinOp::GT, rhs: Box::new(add_exp) }
    )),
  <rel_exp: RelExp> "<=" <add_exp: AddExp> =>
    RelExp::Binary(Box::new(
      Binary { lhs: Box::new(rel_exp), op: BinOp::LE, rhs: Box::new(add_exp) }
    )),
  <rel_exp: RelExp> ">=" <add_exp: AddExp> =>
    RelExp::Binary(Box::new(
      Binary { lhs: Box::new(rel_exp), op: BinOp::GE, rhs: Box::new(add_exp) }
    )),
};

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::Single(<>),
  <add_exp: AddExp> "+" <mul_exp: MulExp> =>
    AddExp::Binary(Box::new(
      Binary { lhs: Box::new(add_exp), op: BinOp::Add, rhs: Box::new(mul_exp) }
    )),
  <add_exp: AddExp> "-" <mul_exp: MulExp> =>
    AddExp::Binary(Box::new(
      Binary { lhs: Box::new(add_exp), op: BinOp::Sub, rhs: Box::new(mul_exp) }
    )),
};

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp::Single(<>),
  <mul_exp: MulExp> "*" <unary_exp: UnaryExp> => 
    MulExp::Binary(Box::new(
      Binary { lhs: Box::new(mul_exp), op: BinOp::Mul, rhs: Box::new(unary_exp) }
    )),
  <mul_exp: MulExp> "/" <unary_exp: UnaryExp> => 
    MulExp::Binary(Box::new(
      Binary { lhs: Box::new(mul_exp), op: BinOp::Div, rhs: Box::new(unary_exp) }
    )),
  <mul_exp: MulExp> "%" <unary_exp: UnaryExp> => 
    MulExp::Binary(Box::new(
      Binary { lhs: Box::new(mul_exp), op: BinOp::Mod, rhs: Box::new(unary_exp) }
    )),
};

UnaryExp: UnaryExp = {
  <pexp: PrimaryExp> => UnaryExp::PExp(<>),
  <u_op: UnaryOP> <u_exp: UnaryExp> => UnaryExp::OpExp(u_op, Box::new(u_exp)),
};

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
  <num: Number> => PrimaryExp::Number(num),
  Ident => PrimaryExp::LVal(<>),
};

Number: i32 = <num: IntConst> => <>;

UnaryOP: UnaryOP = {
  "+" => UnaryOP::Plus,
  "-" => UnaryOP::Minus,
  "!" => UnaryOP::Not,
};
// ---------------------- Exp ------------------------


// ---------------------- Decl -------------------------
Decl: Decl = {
  ConstDecl => Decl::ConstDecl(<>),
  VarDecl => Decl::VarDecl(<>),
};

ConstDecl: ConstDecl = {
  "const" <ty: BType> <defs: Comma<ConstDef>> ";" =>
    ConstDecl { <> },
};

BType: BType = {
  "int" => BType::Int,
};

ConstDef: ConstDef = {
  <id: Ident> "=" <init: ConstInit> => ConstDef{ <> },
};

ConstInit: ConstInit = {
  Exp => ConstInit::ConstExp(<>),
};

VarDecl: VarDecl = {
  <ty: BType> <defs: Comma<VarDef>> ";" => 
    VarDecl { <> },
};

VarDef: VarDef = {
  <id: Ident> => VarDef{ id: id, init: None },
  <id: Ident> "=" <init: VarInit> => VarDef{ id, init: Some(init) },
};

VarInit: VarInit = {
  Exp => VarInit::VarExp(<>),
};

Comma<T>: Vec<T> = {
  <v: (<T> ",")*> <e: T?> => match e {
    None => v,
    Some(e) => {
      let mut v = v;
      v.push(e);
      v
    }
  }
};
// ---------------------- Decl -------------------------

// 如果匹配到标识符, 就返回这个字符串
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<> , 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<> , 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
